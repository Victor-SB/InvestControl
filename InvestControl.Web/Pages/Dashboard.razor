@page "/dashboard"
@using InvestControl.Web.Models
@using InvestControl.Web.Services
@inject UsuarioService UsuarioService
@inject HttpClient Http

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-9">

    <!-- Campo de busca de usuário -->
    <MudGrid GutterSize="3">
        <MudItem xs="12" sm="9">
            <MudTextField @bind-Value="usuarioIdInput"
                          Label="ID do Usuário"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Person"
                          Class="mb-2 custom-input"
                          Style="border: 2px solid #ff6600; background-color: #004481; color: white;" />
        </MudItem>
        <MudItem xs="12" sm="3">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="BuscarUsuario"
                       Class="mt-1 w-full">
                Buscar
            </MudButton>
        </MudItem>
    </MudGrid>

    @if (usuario is not null)
    {
        <MudPaper Class="mt-4 pa-4" Style="background-color: #004481; color: white;">
            <MudText Typo="Typo.h6">Nome: @usuario.Nome</MudText>
            <MudText Typo="Typo.body1">Email: @usuario.Email</MudText>
            <MudText Typo="Typo.body1">
                Porcentagem Corretagem: @usuario.PorcentagemCorretagem.ToString("P2")
            </MudText>
        </MudPaper>
    }

    <MudGrid GutterSize="3" Class="mt-6">

        <!-- CARD 1: Total de Corretagem -->
        <MudItem xs="12" sm="6">
            <MudCard Style="background-color: #004481; color: white;">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Total de Corretagem</MudText>
                </MudCardHeader>
                <MudCardContent>
                    @if (corretagemTotal.HasValue)
                    {
                        <MudText Typo="Typo.h5">@corretagemTotal.Value.ToString("C")</MudText>
                    }
                    else
                    {
                        <MudText>Informe o ID do usuário para visualizar.</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- CARD 2: Total Investido por Ativo -->
        <MudItem xs="12" sm="6">
            <MudCard Style="background-color: #004481; color: white;">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Total Investido por Ativo</MudText>
                </MudCardHeader>
                <MudCardContent>
                    @if (investimentosPorAtivo is not null && investimentosPorAtivo.Any())
                    {
                        @foreach (var investimento in investimentosPorAtivo)
                        {
                            <MudText>@investimento.Codigo: @investimento.TotalInvestido.ToString("C")</MudText>
                        }
                    }
                    else
                    {
                        <MudText>Informe o ID do usuário para visualizar.</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- CARD 3: Posição Global -->
        <MudItem xs="12" sm="6">
            <MudCard Style="background-color: #004481; color: white;">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Posição Global</MudText>
                </MudCardHeader>
                <MudCardContent>
                    @if (posicaoGlobal != null)
                    {
                        <MudText>Valor Investido: @posicaoGlobal.ValorInvestido.ToString("C")</MudText>
                        <MudText>Valor Atual: @posicaoGlobal.ValorAtual.ToString("C")</MudText>
                        <MudText Class="mt-2"
                                 Color="@(posicaoGlobal.Resultado >= 0 ? Color.Success : Color.Error)">
                            Resultado: @posicaoGlobal.Resultado.ToString("C")
                        </MudText>
                    }
                    else
                    {
                        <MudText>Informe o ID do usuário para visualizar.</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- CARD 4: Preço Médio por Ativo -->
        <MudItem xs="12" sm="6">
            <MudCard Style="background-color: #004481; color: white;">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Preço Médio por Ativo</MudText>
                </MudCardHeader>
                <MudCardContent>
                    @if (precosMedios is not null && precosMedios.Any())
                    {
                        @foreach (var preco in precosMedios)
                        {
                            <MudText>@preco.Codigo: @preco.PrecoMedio.ToString("C")</MudText>
                        }
                    }
                    else
                    {
                        <MudText>Informe o ID do usuário para visualizar.</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

    </MudGrid>

</MudContainer>

@code {
    private int usuarioIdInput;
    private UsuarioDetalhadoDto? usuario;
    private decimal? corretagemTotal;
    private List<PosicaoDto>? posicoes;
    private List<InvestimentoAtivoDto>? investimentosPorAtivo;
    private PosicaoGlobalDto? posicaoGlobal;
    private List<PrecoMedioDetalhadoDto>? precosMedios;

    private async Task BuscarUsuario()
    {
        usuario = await UsuarioService.ObterPorIdAsync(usuarioIdInput);
        if (usuario != null)
        {
            await CarregarDadosDoUsuario(usuario.Id);
        }
    }

    private async Task CarregarDadosDoUsuario(int id)
    {
        try
        {
            corretagemTotal = await Http.GetFromJsonAsync<decimal>($"https://localhost:5024/api/operacoes/corretagem/{id}");

            posicoes = await Http.GetFromJsonAsync<List<PosicaoDto>>($"https://localhost:5024/api/posicoes/usuario/{id}");

            investimentosPorAtivo = posicoes?
                .Where(p => p.Ativo is not null)
                .GroupBy(p => p.Ativo!.Codigo)
                .Select(g => new InvestimentoAtivoDto
                    {
                        Codigo = g.Key,
                        TotalInvestido = g.Sum(p => p.PrecoMedio * p.Quantidade)
                    })
                .ToList();

            posicaoGlobal = await Http.GetFromJsonAsync<PosicaoGlobalDto>($"https://localhost:5024/api/posicoes/posicao-global/{id}");

            precosMedios = await Http.GetFromJsonAsync<List<PrecoMedioDetalhadoDto>>($"https://localhost:5024/api/posicoes/precos-medios/{id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados: {ex.Message}");
        }
    }
}
